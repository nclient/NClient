name: Release

on:
  workflow_dispatch:
  push:
    #branches: [ alpha-release, beta-release, release ]
    inputs:
      version:
        description: 'Version'     
        required: true
      path-version:
        description: 'Path version'     
        required: true

env:
  VersionPrefix: ${{ inputs.version }}
  VersionSuffix: unbound
  VersionSuffixPatch: ${{ inputs.path-version }}
      
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - name: Try set alpha version suffix
      if: github.ref == 'refs/heads/alpha-release'
      run: echo "VersionSuffix=alpha.${VersionSuffixPatch}" >> $GITHUB_ENV
    - name: Try set beta version suffix
      if: github.ref == 'refs/heads/beta-release'
      run: echo "VersionSuffix=beta.${VersionSuffixPatch}" >> $GITHUB_ENV
    - name: Try set release version suffix
      if: github.ref == 'refs/heads/release'
      run: |
        echo "VersionSuffix=" >> $GITHUB_ENV
        echo "VersionSuffixPatch=" >> $GITHUB_ENV
    - name: Exit because the branch is not released
      if: env.VersionSuffix == 'unbound'
      run: exit 1
      
    - uses: actions/checkout@v2
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies and build
      run: dotnet build --configuration Release /warnaserror
    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release
    - name: Pack
      run: dotnet pack ./Packable.slnf --no-build --output ./nupkgs --configuration Release 
    #- name: Publish
    #  run: dotnet nuget push ./nupkgs/ --source https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_API_KEY}} --skip-duplicate
    - name: Try set pre-release tag
      if: env.VersionSuffix != ''
      run: echo "ReleaseTag=v${VersionPrefix}-${VersionSuffix}" >> $GITHUB_ENV
    - name: Try set release tag
      if: env.VersionSuffix == ''
      run: echo "ReleaseTag=v${VersionPrefix}" >> $GITHUB_ENV
    #- name: Create release tag
    #  run: git tag ${{env.ReleaseTag}}
    #- name: Push release tag
    #  run: git push origin ${{env.ReleaseTag}}
      
  validation:
    runs-on: ubuntu-latest
    needs: publish 
    steps:
    - name: Try set alpha version suffix
      if: github.ref == 'refs/heads/alpha-release'
      run: echo "VersionSuffix=alpha.${VersionSuffixPatch}" >> $GITHUB_ENV
    - name: Try set beta version suffix
      if: github.ref == 'refs/heads/beta-release'
      run: echo "VersionSuffix=beta.${VersionSuffixPatch}" >> $GITHUB_ENV
    - name: Try set release version suffix
      if: github.ref == 'refs/heads/release'
      run: |
        echo "VersionSuffix=" >> $GITHUB_ENV
        echo "VersionSuffixPatch=" >> $GITHUB_ENV
    - name: Exit because the branch is not released
      if: env.VersionSuffix == 'unbound'
      run: exit 1
      
    - name: Wait verification packages (5 min)
      uses: jakejarvis/wait-action@master
      with:
        time: '5m'
        
    - uses: actions/checkout@v2
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies and build
      run: dotnet build --configuration TestRelease -warnaserror
    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration TestRelease